
val ifb =
  SLURMEnvironment(
    "nverstraete",
    "core.cluster.france-bioinformatique.fr",
    sharedDirectory = "/shared/projects/modellingtme",
    workDirectory = "/tmp/",
    // openMOLEMemory = 3 gigabytes,
    // memory = 3 gigabytes,
    qos = "fast"
  )

val viability = Val[Double]
val remainingCellsRatio = Val[Double]
// Inputs
val mySeed = Val[Int]
val simulationDuration = Val[Int]
val zMax = Val[Int]
val coef = Val[Int]
val propWorldFilledInit = Val[Double]
val nbCancerCellsInit = Val[Int]
val propMonocytesInit = Val[Double]
val propApoptoticInit = Val[Double]
val blockedApoptosisThreshold = Val[Double]
val earlyApoThreshold = Val[Double]
val lateApoThreshold = Val[Double]
val deathThreshold = Val[Double]
val nLCThreshold = Val[Double]
val survivalDecayThreshold = Val[Double]

// Outputs
val nbNeedSignalCancerCells = Val[Double]
val nbBlockedApoCancerCells = Val[Double]
val nbEarlyApoCancerCells = Val[Double]
val nbLateApoCancerCells = Val[Double]
val nbMonocytes = Val[Double]
val nbNurseLikeCells = Val[Double]
val nbDeadCancerCells = Val[Double]

val launch = List(
    "headless-setup",
    "while [ count BlockedApoCancerCells + count EarlyApoCancerCells + count LateApoCancerCells + count NeedSignalCancerCells  > 0 and ticks < simulation-duration * 24 ] [ headless-go ]",
    "outputs")
            
def modelTask(monoInit: Double, simuDur: Int) =
//val modelTask =
    NetLogo6Task(workDirectory / "CLL-multipleBreeds-ABM.nlogo3d", launch, embedWorkspace = false, seed = mySeed, switch3d = true) set(
        (inputs, outputs) += mySeed,
        inputs += simulationDuration mapped "simulation-duration",
        inputs += zMax mapped "z-max",
        inputs += coef mapped "coef",
        inputs += nbCancerCellsInit mapped "nb-cancer-cells-init",
        inputs += propMonocytesInit mapped "prop-monocytes-init",
        inputs += propWorldFilledInit mapped "prop-world-filled-init",
        inputs += propApoptoticInit mapped "prop-apoptotic-init",
        inputs += blockedApoptosisThreshold mapped "BlockedApoptosisThreshold",
        inputs += nLCThreshold mapped "NLCThreshold",
        inputs += earlyApoThreshold mapped "EarlyApoThreshold",
        inputs += lateApoThreshold mapped "LateApoThreshold",
        inputs += deathThreshold mapped "DeathThreshold",
        inputs += survivalDecayThreshold mapped "SurvivalDecayThreshold",
  
        outputs += nbCancerCellsInit,
        outputs += propMonocytesInit,
        outputs += nbNeedSignalCancerCells mapped "nb-NeedSignalCancerCells",
        outputs += nbBlockedApoCancerCells mapped "nb-BlockedApoCancerCells",
        outputs += nbEarlyApoCancerCells mapped "nb-EarlyApoCancerCells",
        outputs += nbLateApoCancerCells mapped "nb-LateApoCancerCells",
        outputs += nbMonocytes mapped "nb-Monocytes",
        outputs += nbNurseLikeCells mapped "nb-NurseLikeCells",
        outputs += nbDeadCancerCells mapped "nb-DeadCancerCells",
  
        //Default values. Can be removed if OpenMOLEÂ Vals are set by values coming from the workflow
        //mySeed := 42,
        simulationDuration := simuDur,
        zMax := 1,
        coef := 4,
        nbCancerCellsInit := 2500,
        propMonocytesInit := monoInit,
        propWorldFilledInit := 85.5,
        propApoptoticInit := 6,
        blockedApoptosisThreshold := 1,
        earlyApoThreshold := 150,
        lateApoThreshold := 200,
        deathThreshold := 250,
        nLCThreshold := 1000,
        survivalDecayThreshold := 1
    )

val fitnessTask = ScalaTask("""
    val nbLivingCells = nbNeedSignalCancerCells + nbBlockedApoCancerCells + nbEarlyApoCancerCells + nbLateApoCancerCells + nbNurseLikeCells + nbMonocytes
    val nbTotalCells = nbLivingCells + nbDeadCancerCells
    val nbTotalCellsInit = nbCancerCellsInit * (1 + propMonocytesInit/100)
    
    val viability = nbLivingCells / nbTotalCells * 100
    val remainingCellsRatio = nbTotalCells / nbTotalCellsInit * 100

""") set (
    inputs += (nbCancerCellsInit, propMonocytesInit),
    inputs += (nbNeedSignalCancerCells, nbBlockedApoCancerCells, nbEarlyApoCancerCells, nbLateApoCancerCells, nbNurseLikeCells, nbMonocytes, nbDeadCancerCells),

    outputs += (nbCancerCellsInit),
    outputs += (viability, remainingCellsRatio, nbMonocytes)

)

def calib(simuDur: Int) = {
    NSGA2Evolution(
        evaluation = modelTask(1.0, simuDur) -- fitnessTask,
        genome = Seq(
            blockedApoptosisThreshold in (1.0, 10.0),
            earlyApoThreshold in (50.0, 200.0),
            lateApoThreshold in (200.0, 250.0),
            deathThreshold in (250.0, 500.0), 
            nLCThreshold in (500.0, 3000.0), 
            survivalDecayThreshold in (1.0, 50.0)
        ),
        objective = Seq(viability delta 95.0, remainingCellsRatio delta 60.0, nbMonocytes delta 0.0),
        stochastic = Stochastic(seed = mySeed),
        parallelism = 400,
        termination = 1000,
        distribution = Island(5 minutes),
    ) on ifb hook(workDirectory / "calibration_PBMC_stochastic_ABM_IFB_20201028_1000a", 1) // 1 save each 1 pop
}

//val listExec = for {
//  obj1 <- listGoals
//  Seq(mono, living, total) = obj1
//} yield calib(mono, living, total)

// EmptyTask() -- (listExec)

calib(13) // Mean of 4 replicates
// calib(9, 92.0, 35.29) // Patient 1
// calib(13, 95.24, 42.86) // Patient 2
// calib(13, 92.98, 60.0) // Patient 3
// calib(13, 90.0, 61.81) // Patient 4